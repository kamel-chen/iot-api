// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GPSServiceClient is the client API for GPSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPSServiceClient interface {
	CreateGPS(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type gPSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGPSServiceClient(cc grpc.ClientConnInterface) GPSServiceClient {
	return &gPSServiceClient{cc}
}

func (c *gPSServiceClient) CreateGPS(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/gps.GPSService/CreateGPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPSServiceServer is the server API for GPSService service.
// All implementations must embed UnimplementedGPSServiceServer
// for forward compatibility
type GPSServiceServer interface {
	CreateGPS(context.Context, *CreateRequest) (*CreateResponse, error)
	mustEmbedUnimplementedGPSServiceServer()
}

// UnimplementedGPSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGPSServiceServer struct {
}

func (UnimplementedGPSServiceServer) CreateGPS(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGPS not implemented")
}
func (UnimplementedGPSServiceServer) mustEmbedUnimplementedGPSServiceServer() {}

// UnsafeGPSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPSServiceServer will
// result in compilation errors.
type UnsafeGPSServiceServer interface {
	mustEmbedUnimplementedGPSServiceServer()
}

func RegisterGPSServiceServer(s grpc.ServiceRegistrar, srv GPSServiceServer) {
	s.RegisterService(&GPSService_ServiceDesc, srv)
}

func _GPSService_CreateGPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPSServiceServer).CreateGPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gps.GPSService/CreateGPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPSServiceServer).CreateGPS(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPSService_ServiceDesc is the grpc.ServiceDesc for GPSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gps.GPSService",
	HandlerType: (*GPSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGPS",
			Handler:    _GPSService_CreateGPS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gps.proto",
}
